-- Generated by node-lua-distiller(version: 0.2.5)  at Thu Sep 22 2022 17:31:55 GMT-0300 (Horário Padrão de Brasília)

---------------------------------------


if __DISTILLER == nil then
  __DISTILLER = nil
  __DISTILLER = {
    FACTORIES = { },
    __nativeRequire = require,
    require = function(id)
      assert(type(id) == "string", "require invalid id:" .. tostring(id))
      if package.loaded[id] then
        return package.loaded[id]
      end
      if __DISTILLER.FACTORIES[id] then
        local func = __DISTILLER.FACTORIES[id]
        package.loaded[id] = func(__DISTILLER.require) or true
        return package.loaded[id]
      end
      return __DISTILLER.__nativeRequire(id)
    end,
    define = function(self, id, factory)
      assert(type(id) == "string", "invalid id:" .. tostring(id))
      assert(type(factory) == "function", "invalid factory:" .. tostring(factory))
      if package.loaded[id] == nil and self.FACTORIES[id] == nil then
        self.FACTORIES[id] = factory
      else
        print("[__DISTILLER::define] module " .. tostring(id) .. " is already defined")
      end
    end,
    exec = function(self, id)
      local func = self.FACTORIES[id]
      assert(func, "missing factory method for id " .. tostring(id))
      func(__DISTILLER.require)
    end
  }
end



---------------------------------------


__DISTILLER:define("Directions", function(require)
local Directions = {
    NORTH = "FORWARD",
    SOUTH = "BACK",
    DOWN = "DOWN",
    UP = "UP",
    WEST = "LEFT",
    EAST = "RIGHT"
}
return Directions
end)



---------------------------------------


__DISTILLER:define("GetIndex", function(require)
local function GetIndex(item, tabel)
    local index = {}
    for k, v in pairs(tabel) do
        index[v] = k
    end
    return index[item]
end
return GetIndex
end)



---------------------------------------


__DISTILLER:define("TurtleTurn", function(require)
local GetIndex = require("GetIndex")
local Directions = require("Directions")

local TurtleTurn = {
    turns = 0,
    faces = {
        [0] = Directions.NORTH,
        [1] = Directions.EAST,
        [2] = Directions.SOUTH,
        [3] = Directions.WEST
    }
}


function TurtleTurn:new(o, turns, facing)
    o = o or {}
    local c = setmetatable(o, self)
    self.__index = self
    self.turns = turns or 0

    local initialFaceIndex = GetIndex(facing, TurtleTurn.faces) - 1

    -- if turtle is already facing north
    if (initialFaceIndex == 0) then
        self.faces = TurtleTurn.faces
    else
        ---set facing face as index 0
        for k, v in pairs(TurtleTurn.faces) do

            if(k >3)then
                break
            end

            if (k < initialFaceIndex) then
                self.faces[(k + initialFaceIndex)] = v
            else
                self.faces[(k - initialFaceIndex)] = v
            end

        end
    end

    return c
end

function TurtleTurn:getFacing()
    return self.faces[self.turns % 4]
end

function TurtleTurn:turnRight()
    self.turns = self.turns + 1
    turtle.turnRight()
end

function TurtleTurn:turnLeft()
    self.turns = self.turns - 1
    turtle.turnLeft()
end

function TurtleTurn:face(direction)

    local turnDelta = self.faces[direction]

    if (turnDelta == nil) then
        print("direction not faceble")
    end

    if (turnDelta == self:getFacing()) then
        return false
    end

    while turnDelta ~= self:getFacing() do

        if (turnDelta < self:getFacing()) then
            self:turnLeft()
        elseif (turnDelta > self:getFacing()) then
            self:turnRight()
        else
            print("something went wrong")
            return false
        end
    end

    return true

end

return TurtleTurn
end)



---------------------------------------


__DISTILLER:define("strict", function(require)
-- --
-- -- strict.lua
-- -- checks uses of undeclared global variables
-- -- All global variables must be 'declared' through a regular assignment
-- -- (even assigning nil will do) in a main chunk before being used
-- -- anywhere or assigned to inside a function.
-- --

-- local getinfo, error, rawset, rawget = debug.getinfo, error, rawset, rawget

-- local mt = getmetatable(_G)
-- if mt == nil then
--   mt = {}
--   setmetatable(_G, mt)
-- end

-- mt.__declared = {}

-- local function what ()
--   local d = getinfo(3, "S")
--   return d and d.what or "C"
-- end

-- mt.__newindex = function (t, n, v)
--   if not mt.__declared[n] then
--     local w = what()
--     if w ~= "main" and w ~= "C" then
--       error("assign to undeclared variable '"..n.."'", 2)
--     end
--     mt.__declared[n] = true
--   end
--   rawset(t, n, v)
-- end
  
-- mt.__index = function (t, n)
--   if not mt.__declared[n] and what() ~= "C" then
--     error("variable '"..n.."' is not declared", 2)
--   end
--   return rawget(t, n)
-- end

end)



---------------------------------------


__DISTILLER:define("Singer", function(require)
require "strict"

local Singer = {}

function Singer.sing(message)
    print(message)
end

function Singer:singFoundSelectedAt()
    local item = turtle.getItemDetail()

    if (item == nil) then
        return nil
    end

    local itemName = nil

    for k, v in pairs(self.oreSlots) do
        itemName = k
        break
    end

    local x, y, z = gps.locate(2)

    if(x ~= nil)then
        self.sing("Found [" .. itemName .. "] at (" .. x .. ", " .. y .. ", " .. z .. ")")
    end

    self.sing("Found [" .. itemName .. "]")


end

return Singer
end)



---------------------------------------


__DISTILLER:define("SelectBuffer", function(require)
require "strict"
local SelectBuffer = {
    slot = nil --[[int]]
}

function SelectBuffer:save()
    self.slot = turtle.getSelectedSlot()
end

function SelectBuffer:load()
    turtle.select(self.slot)
end

return SelectBuffer
end)



---------------------------------------


__DISTILLER:define("FixedSlot", function(require)
require("strict")
local FixedSlot = {
    ENDERCHEST_SLOT = 1,
    FUEL_SLOT = 2,
    ORE1_SLOT = 3,
    ORE2_SLOT = 4,
    ORE3_SLOT = 5,
    ORE4_SLOT = 6,
    ORE5_SLOT = 7,
    ORE6_SLOT = 8,
    ORE7_SLOT = 9,
    ORE8_SLOT = 10
}
return FixedSlot
end)



---------------------------------------


__DISTILLER:define("EnderChest", function(require)
require "strict"
local FixedSlot = require("FixedSlot")
local Singer = require("Singer")
local SelectBuffer = require("SelectBuffer")

local EnderChest = {
    itemSlot = 1,
    placed = false
}

---@param o any optional
function EnderChest:new(o, slot --[[int]] , placed --[[boolean]] )
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    self.itemSlot = slot or 1
    self.placed = placed or false
    return o

end

function EnderChest.positionUp()
    Singer.singer()
    if (turtle.detectUp()) then
        turtle.digUp()
    end

    turtle.up()

end

function EnderChest.goBackDown()

    if (turtle.detectDown()) then
        turtle.digDown()
    end

    turtle.down()
end

function EnderChest:place()
    SelectBuffer:save()

    self:positionUp()

    turtle.select(self.itemSlot)

    local placed = turtle.placeDown()

    SelectBuffer:load()

    if (placed) then
        self.placed = placed
    end

end

function EnderChest:retrive()

    SelectBuffer:save()

    turtle.select(self.itemSlot)

    local placed = turtle.digDown()

    SelectBuffer:load()

    self:goBackDown()

end

function EnderChest:isFull()
    for i = FixedSlot.ORE1_SLOT, 16 do
        if turtle:getItemSpace(i) == 0 then
            return true
        end
    end
    return false

end

function EnderChest:fullInentoryRoutine()

    if (self:isFull()) then

        self:place()

        SelectBuffer.save()

        for i = FixedSlot.ORE1_SLOT, FixedSlot.ORE8_SLOT do
            turtle.select(i)
            local max = turtle.getItemCount()
            turtle.dropDown(max - 1)
        end

        for i = (FixedSlot.ORE8_SLOT + 1), 16 do
            turtle.select(i)
            turtle.dropDown()
        end

        SelectBuffer:load()

        self:retrive()

        return true

    end
end

return EnderChest
end)



---------------------------------------


__DISTILLER:define("Fuel", function(require)

require "strict"
local Singer=require("Singer")
local SelectBuffer=require("SelectBuffer")
local FixedSlot= require("FixedSlot")
local EnderChest = require("EnderChest")

local Fuel = {fThreshold=10,fSlot=FixedSlot.FUEL_SLOT,enderChest=nil}

function Fuel:new(o,enderChest)
    o = o or {}
    setmetatable(o, self)
    self.__index = self

    self.enderChest = enderChest or EnderChest:new()
end

function Fuel:FuelRoutine ()
    local fLevel = turtle.getFuelLevel()

    if(fLevel <= self.fThreshold) then

        Singer:sing("Refueling")

        self.enderChest:place()

        turtle.getItemDetail()

        SelectBuffer:save()

        turtle.select(self.fSlot)
        turtle.suckDown(10)
        turtle.refuel(turtle.getItemCount())
        SelectBuffer:load()

        self.enderChest:retrive()

    end
end

return Fuel
end)



---------------------------------------


__DISTILLER:define("index.lua_distilled", function(require)
local Directions = require("Directions")
local TurtleTurn = require("TurtleTurn")

local initialFacing = Directions.NORTH
local turleTurn = TurtleTurn:new(nil, 0, initialFacing)

local Fuel = require("Fuel")
local Enderchest = require("EnderChest")

local xMax = tonumber(arg[1]) or 3
local yMax = tonumber(arg[2]) or 3
local x = 0
local y = 0

turtle = {

}

function turtle.turnLeft()
    print('left')
end

function turtle.dig()
    -- print('dig')
end

function turtle.forward()
    -- print('forward')
end

while true do
    
    -- Fuel:FuelRoutine()
    -- Enderchest:fullInentoryRoutine()
    if (y > yMax) then
        break
    end
    if (x > xMax) then
        turleTurn:turnLeft()
        turtle.dig()
        turtle.forward()
        x = 1
        print("{X:" .. tostring(x) .. " Y:" .. tostring(y) .. "}")
        y = y + 1
        turleTurn:turnLeft()
    else

        turtle.dig()
        turtle.forward()
        x = x + 1
        print("{X:" .. tostring(x) .. " Y:" .. tostring(y) .. "}")
    end



end

end)



---------------------------------------


__DISTILLER:exec("index.lua_distilled")